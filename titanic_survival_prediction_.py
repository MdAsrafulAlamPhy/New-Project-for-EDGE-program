# -*- coding: utf-8 -*-
"""titanic survival prediction .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-rNM3wr2zqVJlRBut_ZA4frYZ8Xw58nv
"""

import seaborn as sns
df = sns.load_dataset('titanic')

print(df)

# === 1. Load libraries ===
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np

# === 2. Load dataset ===
df = sns.load_dataset('titanic')
df.head()

df.info()
print("Showed Info")

df.isnull().sum()

sns.countplot(data=df, x='sex')
plt.title('Sex Count')
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(data=df, x='age', y='fare', hue='survived', alpha=0.7, palette='Set1')
plt.title('Scatter Plot of Age vs Fare (colored by Survival)')
plt.xlabel('Age')
plt.ylabel('Fare')
plt.show()

plt.figure(figsize=(8,6))
sns.scatterplot(data=df, x='age', y='family_size', hue='sex', alpha=0.6)
plt.title('Age vs Family Size (colored by Sex)')
plt.xlabel('Age')
plt.ylabel('Family Size')
plt.show()

plt.figure(figsize=(8,6))
sns.stripplot(data=df, x='survived', y='age', jitter=True, hue='sex', dodge=True, alpha=0.5)
plt.title('Survival vs Age by Gender')
plt.xlabel('Survived (0 = No, 1 = Yes)')
plt.ylabel('Age')
plt.show()

# Survival counts
sns.countplot(data=df, x='survived')
plt.title('Survival Count')
plt.show()

# Age distribution
sns.histplot(df['age'].dropna(), kde=True)
plt.title('Age Distribution')
plt.show()

# Heatmap for missing values
sns.heatmap(df.isnull(), cbar=False)
plt.title('Missing Data Heatmap')
plt.show()

# Fill missing age with median
df['age'] = df['age'].fillna(df['age'].median())

# Fill embarked with mode
df['embarked'] = df['embarked'].fillna(df['embarked'].mode()[0])
df['embark_town']=df['embark_town'].fillna(df['embark_town'].mode()[0])
# Drop deck due to too many nulls
df.drop(columns=['deck'], inplace=True)

df.isnull().sum()

# Create new feature: family_size
df['family_size'] = df['sibsp'] + df['parch'] + 1

# Create binary: is_alone
df['is_alone'] = (df['family_size'] == 1).astype(int)
# Encode categorical features
df['sex'] = df['sex'].map({'male': 0, 'female': 1})
df['embarked'] = df['embarked'].map({'S': 0, 'C': 1, 'Q': 2})

# Insight: Who had more chance to survive?
sns.barplot(x='pclass', y='survived', data=df)
plt.title('Survival Rate by Class')
plt.show()

sns.barplot(x='is_alone', y='survived', data=df)
plt.title('Survival Rate by Alone vs Not Alone')
plt.show()

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

features = ['pclass', 'sex', 'age', 'fare', 'embarked', 'family_size', 'is_alone']
X = df[features]
y = df['survived']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

model = LogisticRegression(max_iter=1000)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print("Accuracy:", accuracy_score(y_test, y_pred))